From: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Date: Wed, 15 Jan 2020 16:56:17 +1300
Subject: ubuntu-panel: Allow tweaking some Ubuntu specific settings

Expose some of the settings that most users will find useful for our
Ubuntu Dock installation. Those are located in its own panel for now:
* change intellihide true/hide mode
* change dock icon size
* modify placement of the launcher (all monitor, primary or any monitors)
* Configure the desktop icons extension

These changes are maintained in a single branch at:
 https://gitlab.gnome.org/Community/Ubuntu/gnome-control-center/-/commits/ubuntu-panel

Please provide merge requests there.

Origin: ubuntu
Forwarded: not-needed
---
 panels/meson.build                          |    1 +
 panels/ubuntu/assets/colors/color.svg.in    |    5 +
 panels/ubuntu/assets/theme-dark.svg         |    1 +
 panels/ubuntu/assets/theme-light.svg        |    1 +
 panels/ubuntu/cc-ubuntu-dock-dialog.c       |  103 ++
 panels/ubuntu/cc-ubuntu-dock-dialog.h       |   31 +
 panels/ubuntu/cc-ubuntu-dock-dialog.ui      |   81 ++
 panels/ubuntu/cc-ubuntu-panel.c             | 1730 +++++++++++++++++++++++++++
 panels/ubuntu/cc-ubuntu-panel.h             |   35 +
 panels/ubuntu/cc-ubuntu-panel.ui            |  217 ++++
 panels/ubuntu/gnome-ubuntu-panel.desktop.in |   13 +
 panels/ubuntu/meson.build                   |   97 ++
 panels/ubuntu/ubuntu.gresource.xml          |    6 +
 po/POTFILES.in                              |    5 +
 shell/cc-panel-list.c                       |    1 +
 shell/cc-panel-loader.c                     |    3 +
 16 files changed, 2330 insertions(+)
 create mode 100644 panels/ubuntu/assets/colors/color.svg.in
 create mode 100644 panels/ubuntu/assets/theme-dark.svg
 create mode 100644 panels/ubuntu/assets/theme-light.svg
 create mode 100644 panels/ubuntu/cc-ubuntu-dock-dialog.c
 create mode 100644 panels/ubuntu/cc-ubuntu-dock-dialog.h
 create mode 100644 panels/ubuntu/cc-ubuntu-dock-dialog.ui
 create mode 100644 panels/ubuntu/cc-ubuntu-panel.c
 create mode 100644 panels/ubuntu/cc-ubuntu-panel.h
 create mode 100644 panels/ubuntu/cc-ubuntu-panel.ui
 create mode 100644 panels/ubuntu/gnome-ubuntu-panel.desktop.in
 create mode 100644 panels/ubuntu/meson.build
 create mode 100644 panels/ubuntu/ubuntu.gresource.xml

--- a/panels/meson.build
+++ b/panels/meson.build
@@ -26,6 +26,7 @@
   'search',
   'sharing',
   'sound',
+  'ubuntu',
   'universal-access',
   'usage',
   'user-accounts',
--- /dev/null
+++ b/panels/ubuntu/cc-ubuntu-panel.c
@@ -0,0 +1,993 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2017-2022 Canonical Ltd
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General
+ * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "config.h"
+
+#include <glib/gi18n-lib.h>
+#include <gio/gdesktopappinfo.h>
+
+#include "cc-list-row.h"
+#include "cc-split-row.h"
+#include "cc-ubuntu-panel.h"
+#include "cc-ubuntu-resources.h"
+#include "shell/cc-application.h"
+#include "shell/cc-object-storage.h"
+
+#include "panels/display/cc-display-config-manager-dbus.h"
+#include "panels/display/cc-display-config.h"
+
+#define MIN_ICONSIZE 16.0
+#define MAX_ICONSIZE 64.0
+#define DEFAULT_ICONSIZE 48.0
+#define ICONSIZE_KEY "dash-max-icon-size"
+
+#define UBUNTU_DOCK_SCHEMA "org.gnome.shell.extensions.dash-to-dock"
+#define UBUNTU_DOCK_ALL_MONITORS_KEY "multi-monitor"
+#define UBUNTU_DOCK_PREFERRED_MONITOR_KEY "preferred-monitor"
+#define UBUNTU_DOCK_PREFERRED_CONNECTOR_KEY "preferred-monitor-by-connector"
+
+/*
+ * This allows to migrate settings from 'preferred-monitor' to
+ * 'preferred-monitor-by-connector', and can be removed after 22.04
+ * simplifying all the logic, by relying on connector names only.
+ */
+#define UBUNTU_DOCK_MONITOR_INDEX_USE_CONNECTOR -2
+
+struct _CcUbuntuPanel {
+  CcPanel                 parent_instance;
+
+  AdwStatusPage          *no_settings_page;
+  AdwPreferencesPage     *dock_preferences_page;
+  CcListRow              *dock_autohide_switch;
+  CcSplitRow             *dock_extendheight_row;
+  AdwComboRow            *dock_monitor_row;
+  GListStore             *dock_monitors_list;
+  AdwComboRow            *dock_position_row;
+  GtkAdjustment          *icon_size_adjustment;
+  GtkScale               *icon_size_scale;
+  CcListRow              *volumes_switch;
+  GtkCheckButton         *unmounted_check;
+  GtkCheckButton         *network_volumes_check;
+  CcListRow              *trash_switch;
+
+  GSettings              *dock_settings;
+  CcDisplayConfigManager *display_config_manager;
+  CcDisplayConfig        *display_current_config;
+  GDBusProxy             *shell_proxy;
+
+  gboolean                updating;
+};
+
+CC_PANEL_REGISTER (CcUbuntuPanel, cc_ubuntu_panel);
+
+static void monitor_labeler_hide (CcUbuntuPanel *self);
+static void update_dock_monitor_combo_row_selection (CcUbuntuPanel *self);
+
+static void
+cc_ubuntu_panel_dispose (GObject *object)
+{
+  CcUbuntuPanel *self = CC_UBUNTU_PANEL (object);
+
+  monitor_labeler_hide (self);
+
+  g_clear_object (&self->dock_settings);
+  g_clear_object (&self->dock_monitors_list);
+  g_clear_object (&self->display_current_config);
+  g_clear_object (&self->display_config_manager);
+  g_clear_object (&self->shell_proxy);
+
+  G_OBJECT_CLASS (cc_ubuntu_panel_parent_class)->dispose (object);
+}
+
+static void
+monitor_labeler_hide (CcUbuntuPanel *self)
+{
+  if (!self->shell_proxy)
+    return;
+
+  g_dbus_proxy_call (self->shell_proxy,
+                     "HideMonitorLabels",
+                     NULL, G_DBUS_CALL_FLAGS_NONE,
+                     -1, NULL, NULL, NULL);
+}
+
+static void
+monitor_labeler_show (CcUbuntuPanel *self)
+{
+  GList *outputs, *l;
+  GVariantBuilder builder;
+  gint number = 0;
+  guint n_monitors = 0;
+
+  if (!self->shell_proxy || !self->display_current_config)
+    return;
+
+  outputs = cc_display_config_get_ui_sorted_monitors (self->display_current_config);
+  if (!outputs)
+    return;
+
+  if (cc_display_config_is_cloning (self->display_current_config))
+    return monitor_labeler_hide (self);
+
+  g_variant_builder_init (&builder, G_VARIANT_TYPE_TUPLE);
+  g_variant_builder_open (&builder, G_VARIANT_TYPE_ARRAY);
+
+  for (l = outputs; l != NULL; l = l->next)
+    {
+      CcDisplayMonitor *output = l->data;
+
+      if (!cc_display_monitor_is_active (output))
+        continue;
+
+      number = cc_display_monitor_get_ui_number (output);
+      if (number == 0)
+        continue;
+
+      g_variant_builder_add (&builder, "{sv}",
+                             cc_display_monitor_get_connector_name (output),
+                             g_variant_new_int32 (number));
+      n_monitors++;
+    }
+
+  g_variant_builder_close (&builder);
+
+  if (number < 2 || n_monitors < 2)
+    {
+      g_variant_builder_clear (&builder);
+      return monitor_labeler_hide (self);
+    }
+
+  g_dbus_proxy_call (self->shell_proxy,
+                     "ShowMonitorLabels",
+                     g_variant_builder_end (&builder),
+                     G_DBUS_CALL_FLAGS_NONE,
+                     -1, NULL, NULL, NULL);
+}
+
+static void
+ensure_monitor_labels (CcUbuntuPanel *self)
+{
+  g_autoptr(GList) windows = NULL;
+  GList *w;
+
+  windows = gtk_window_list_toplevels ();
+
+  for (w = windows; w; w = w->next)
+    {
+      if (gtk_window_is_active (GTK_WINDOW (w->data)))
+        {
+          monitor_labeler_show (self);
+          break;
+        }
+    }
+
+  if (!w)
+    monitor_labeler_hide (self);
+}
+
+static void
+shell_proxy_ready (GObject        *source,
+                   GAsyncResult   *res,
+                   CcUbuntuPanel *self)
+{
+  GDBusProxy *proxy;
+  g_autoptr(GError) error = NULL;
+
+  proxy = cc_object_storage_create_dbus_proxy_finish (res, &error);
+  if (!proxy)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Failed to contact gnome-shell: %s", error->message);
+      return;
+    }
+
+  self->shell_proxy = g_steal_pointer (&proxy);
+
+  ensure_monitor_labels (self);
+}
+
+static GList *
+get_valid_monitors (CcUbuntuPanel   *self,
+                    gint            *n_monitors,
+                    gint            *primary_index)
+{
+  CcDisplayMonitor *primary_monitor;
+  GList *config_monitors = NULL;
+  GList *valid_monitors, *l;
+  gint n_valid_monitors;
+
+  config_monitors = cc_display_config_get_monitors (self->display_current_config);
+  primary_monitor = NULL;
+  valid_monitors = NULL;
+  n_valid_monitors = 0;
+
+  for (l = config_monitors; l != NULL; l = l->next)
+    {
+      CcDisplayMonitor *monitor = l->data;
+
+      if (!cc_display_monitor_is_active (monitor))
+        continue;
+
+      /* The default monitors list uses reversed order, so prepend to
+       * set it back to mutter order */
+      valid_monitors = g_list_prepend (valid_monitors, monitor);
+
+      if (cc_display_monitor_is_primary (monitor))
+        primary_monitor = monitor;
+
+      n_valid_monitors++;
+    }
+
+  if (n_monitors)
+    *n_monitors = n_valid_monitors;
+
+  if (primary_index)
+    *primary_index = g_list_index (valid_monitors, primary_monitor);
+
+  return valid_monitors;
+}
+
+static int
+ui_sort_monitor (gconstpointer a, gconstpointer b)
+{
+  CcDisplayMonitor *monitor_a = (CcDisplayMonitor *) a;
+  CcDisplayMonitor *monitor_b = (CcDisplayMonitor *) b;
+
+  return cc_display_monitor_get_ui_number (monitor_a) -
+         cc_display_monitor_get_ui_number (monitor_b);
+}
+
+static GList *
+get_valid_monitors_sorted (CcUbuntuPanel   *self,
+                           gint            *n_monitors,
+                           gint            *primary_index)
+{
+  GList *monitors = get_valid_monitors (self, n_monitors, primary_index);
+
+  return g_list_sort (monitors, ui_sort_monitor);
+}
+
+static int
+dock_monitor_to_id (gint index,
+                    gint primary_monitor,
+                    gint n_monitors)
+{
+  if (index < 0)
+    return -1;
+
+  /* The The dock uses the Gdk index for monitors, where the primary monitor
+   * always has index 0, so let's follow what dash-to-dock does in docking.js
+   * (as part of _createDocks) */
+  return (primary_monitor + index) % n_monitors;
+}
+
+typedef enum
+{
+  GSD_UBUNTU_DOCK_MONITOR_ALL,
+  GSD_UBUNTU_DOCK_MONITOR_PRIMARY,
+} GsdUbuntuDockMonitor;
+
+static char *
+get_dock_monitor_value_object_name (GObject *object_value,
+                                    CcUbuntuPanel *self)
+{
+  if (GTK_IS_STRING_OBJECT (object_value))
+    {
+      GtkStringObject *string_object = GTK_STRING_OBJECT (object_value);
+
+      return g_strdup (gtk_string_object_get_string (string_object));
+    }
+
+  if (CC_IS_DISPLAY_MONITOR (object_value))
+    {
+      CcDisplayMonitor *monitor = CC_DISPLAY_MONITOR (object_value);
+      int monitor_number = cc_display_monitor_get_ui_number (monitor);
+      const char *monitor_name = cc_display_monitor_get_display_name (monitor);
+
+      if (gtk_widget_get_state_flags (GTK_WIDGET (self)) & GTK_STATE_FLAG_DIR_LTR)
+        return g_strdup_printf ("%d. %s", monitor_number, monitor_name);
+      else
+        return g_strdup_printf ("%s .%d", monitor_name, monitor_number);
+    }
+
+  g_return_val_if_reached (NULL);
+}
+
+static GtkStringObject *
+new_take_string_object (char *label)
+{
+  g_autofree char *string = g_steal_pointer (&label);
+  return gtk_string_object_new (string);
+}
+
+static void
+populate_dock_monitor_combo_row (CcUbuntuPanel *self)
+{
+  g_autoptr(CcDisplayMonitor) primary_monitor = NULL;
+  g_autoptr(GList) valid_monitors = NULL;
+  g_autoptr(GtkStringObject) primary_value_object = NULL;
+  g_autoptr(GtkStringObject) all_displays_value_object = NULL;
+  GList *l;
+  gint index;
+
+  if (self->display_config_manager == NULL)
+    return;
+
+  g_list_store_remove_all (self->dock_monitors_list);
+
+  valid_monitors = get_valid_monitors_sorted (self, NULL, NULL);
+  gtk_widget_set_visible (GTK_WIDGET (self->dock_monitor_row), valid_monitors != NULL);
+
+  if (!valid_monitors)
+    return;
+
+  all_displays_value_object = gtk_string_object_new (_("All displays"));
+  g_list_store_insert (self->dock_monitors_list,
+                       GSD_UBUNTU_DOCK_MONITOR_ALL,
+                       all_displays_value_object);
+
+  for (l = valid_monitors, index = 0; l != NULL; l = l->next, index++)
+    {
+      CcDisplayMonitor *monitor = l->data;
+
+      if (cc_display_monitor_is_primary (monitor))
+        g_set_object (&primary_monitor, monitor);
+
+      g_list_store_append (self->dock_monitors_list, monitor);
+    }
+
+  if (primary_monitor)
+    {
+      int ui_number = cc_display_monitor_get_ui_number (primary_monitor);
+
+      if (gtk_widget_get_state_flags (GTK_WIDGET (self)) & GTK_STATE_FLAG_DIR_LTR)
+        {
+          primary_value_object = new_take_string_object (
+            g_strdup_printf ("%s (%d)", _("Primary Display"), ui_number));
+        }
+      else
+        {
+          primary_value_object = new_take_string_object (
+            g_strdup_printf ("(%d) %s", ui_number, _("Primary Display")));
+        }
+    }
+  else
+    {
+      primary_value_object = gtk_string_object_new (_("Primary Display"));
+    }
+
+  g_list_store_insert (self->dock_monitors_list,
+                       GSD_UBUNTU_DOCK_MONITOR_PRIMARY,
+                       primary_value_object);
+}
+
+static void
+on_screen_changed (CcUbuntuPanel *self)
+{
+  g_autoptr(CcDisplayConfig) current = NULL;
+
+  if (self->display_config_manager == NULL || !self->dock_settings)
+    return;
+
+  current = cc_display_config_manager_get_current (self->display_config_manager);
+  if (current == NULL)
+    return;
+
+  self->updating = TRUE;
+
+  g_set_object (&self->display_current_config, current);
+
+  populate_dock_monitor_combo_row (self);
+  ensure_monitor_labels (self);
+
+  self->updating = FALSE;
+
+  update_dock_monitor_combo_row_selection (self);
+}
+
+static void
+session_bus_ready (GObject        *source,
+                   GAsyncResult   *res,
+                   gpointer        user_data)
+{
+  CcUbuntuPanel *self = user_data;
+  GDBusConnection *bus;
+  g_autoptr(GError) error = NULL;
+
+  bus = g_bus_get_finish (res, &error);
+  if (!bus)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Failed to get session bus: %s", error->message);
+      return;
+    }
+
+  if (self->dock_settings)
+    {
+      self->display_config_manager = cc_display_config_manager_dbus_new ();
+      g_signal_connect_object (self->display_config_manager, "changed",
+                              G_CALLBACK (on_screen_changed),
+                              self,
+                              G_CONNECT_SWAPPED);
+    }
+}
+
+static void
+icon_size_widget_refresh (CcUbuntuPanel *self)
+{
+  gint value = g_settings_get_int (self->dock_settings, ICONSIZE_KEY);
+  gtk_adjustment_set_value (self->icon_size_adjustment, (gdouble) value / 2);
+}
+
+static gchar *
+on_icon_size_format_value (GtkScale *scale,
+                           gdouble value,
+                           gpointer data)
+{
+  return g_strdup_printf ("%d", (int)value * 2);
+}
+
+static void
+on_icon_size_adjustment_value_changed (CcUbuntuPanel *self)
+{
+  if (!self->dock_settings)
+    return;
+
+  gint value = (gint)gtk_adjustment_get_value (self->icon_size_adjustment) * 2;
+  if (g_settings_get_int (self->dock_settings, ICONSIZE_KEY) != value)
+    g_settings_set_int (self->dock_settings, ICONSIZE_KEY, value);
+}
+
+static void
+on_dock_position_row_changed (CcUbuntuPanel *self)
+{
+  int selected_position;
+
+  selected_position = adw_combo_row_get_selected (self->dock_position_row);
+  if (selected_position == 0)
+  {
+    cc_split_row_set_default_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/left/dock.svg");
+    cc_split_row_set_alternative_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/left/panel.svg");
+  }
+  else if (selected_position == 1)
+  {
+    cc_split_row_set_default_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/bottom/dock.svg");
+    cc_split_row_set_alternative_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/bottom/panel.svg");
+  }
+  else if (selected_position == 2)
+  {
+    cc_split_row_set_default_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/right/dock.svg");
+    cc_split_row_set_alternative_illustration_resource (self->dock_extendheight_row, "/org/gnome/control-center/ubuntu/assets/right/panel.svg");
+  }
+}
+static void
+on_dock_monitor_row_changed (CcUbuntuPanel *self)
+{
+  gboolean ubuntu_dock_on_all_monitors;
+  g_autofree char *ubuntu_dock_current_connector = NULL;
+  int selected;
+
+  if (self->updating || !self->dock_settings)
+    return;
+
+  selected = adw_combo_row_get_selected (self->dock_monitor_row);
+  if (selected < 0)
+    return;
+
+  ubuntu_dock_on_all_monitors =
+    g_settings_get_boolean (self->dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY);
+  ubuntu_dock_current_connector =
+    g_settings_get_string (self->dock_settings, UBUNTU_DOCK_PREFERRED_CONNECTOR_KEY);
+  if (selected == GSD_UBUNTU_DOCK_MONITOR_ALL)
+    {
+      if (!ubuntu_dock_on_all_monitors)
+        {
+          g_settings_set_boolean (self->dock_settings,
+                                  UBUNTU_DOCK_ALL_MONITORS_KEY,
+                                  TRUE);
+          g_settings_apply (self->dock_settings);
+        }
+    }
+  else
+    {
+      g_autoptr(GSettings) delayed_settings = g_settings_new (UBUNTU_DOCK_SCHEMA);
+      g_settings_delay (delayed_settings);
+      g_autofree char *connector_name = NULL;
+
+      if (ubuntu_dock_on_all_monitors)
+        g_settings_set_boolean (delayed_settings, UBUNTU_DOCK_ALL_MONITORS_KEY, FALSE);
+
+      if (selected == GSD_UBUNTU_DOCK_MONITOR_PRIMARY)
+        {
+          connector_name = g_strdup ("primary");
+        }
+      else
+        {
+          g_autoptr(GObject) value_object = NULL;
+          g_autoptr(CcDisplayMonitor) monitor = NULL;
+
+          monitor = g_list_model_get_item (G_LIST_MODEL (self->dock_monitors_list),
+                                           selected);
+          connector_name = g_strdup (cc_display_monitor_get_connector_name (monitor));
+        }
+
+      if (g_strcmp0 (ubuntu_dock_current_connector, connector_name) != 0)
+        {
+          g_settings_set_int (delayed_settings, UBUNTU_DOCK_PREFERRED_MONITOR_KEY,
+                                                UBUNTU_DOCK_MONITOR_INDEX_USE_CONNECTOR);
+          g_settings_set_string (delayed_settings, UBUNTU_DOCK_PREFERRED_CONNECTOR_KEY,
+                                 connector_name);
+        }
+
+      g_settings_apply (delayed_settings);
+    }
+}
+
+static CcDisplayMonitor *
+get_dock_monitor (CcUbuntuPanel *self)
+{
+  g_autoptr(GList) monitors = NULL;
+  int index;
+  int n_monitors;
+  int primary_monitor;
+
+  monitors = get_valid_monitors_sorted (self, &n_monitors, &primary_monitor);
+  index = g_settings_get_int (self->dock_settings, UBUNTU_DOCK_PREFERRED_MONITOR_KEY);
+
+  if (index == UBUNTU_DOCK_MONITOR_INDEX_USE_CONNECTOR)
+    {
+      g_autofree char *connector = NULL;
+      GList *l;
+      int i;
+
+      connector = g_settings_get_string (self->dock_settings,
+                                         UBUNTU_DOCK_PREFERRED_CONNECTOR_KEY);
+
+      for (l = monitors, i = 0; l; l = l->next, i++)
+        {
+          CcDisplayMonitor *monitor = l->data;
+          const char *monitor_connector = cc_display_monitor_get_connector_name (monitor);
+          if (g_strcmp0 (monitor_connector, connector) == 0)
+            return g_object_ref (monitor);
+        }
+    }
+
+  if (index < 0 || index >= n_monitors)
+    return NULL;
+
+  index = dock_monitor_to_id (index, primary_monitor, n_monitors);
+
+  return g_object_ref (g_list_nth_data (monitors, index));
+}
+
+static gboolean
+dock_placement_row_compare (gconstpointer a, gconstpointer b)
+{
+  GObject *row_object_a = G_OBJECT (a);
+  GObject *row_object_b = G_OBJECT (b);
+
+  if (row_object_a == NULL || row_object_b == NULL)
+    return row_object_a == row_object_b;
+
+  if (G_OBJECT_TYPE (row_object_a) != G_OBJECT_TYPE (row_object_b))
+    return FALSE;
+
+  if (CC_IS_DISPLAY_MONITOR (row_object_a))
+    {
+      return cc_display_monitor_get_ui_number (CC_DISPLAY_MONITOR (row_object_a)) ==
+             cc_display_monitor_get_ui_number (CC_DISPLAY_MONITOR (row_object_b));
+    }
+
+  if (GTK_IS_STRING_OBJECT (row_object_a))
+    {
+      return g_strcmp0 (gtk_string_object_get_string (GTK_STRING_OBJECT (row_object_a)),
+                        gtk_string_object_get_string (GTK_STRING_OBJECT (row_object_b))) == 0;
+    }
+
+  g_return_val_if_reached (FALSE);
+}
+
+static void
+update_dock_monitor_combo_row_selection (CcUbuntuPanel *self)
+{
+  guint selection = GSD_UBUNTU_DOCK_MONITOR_PRIMARY;
+
+  if (g_settings_get_boolean (self->dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY))
+    {
+      selection = GSD_UBUNTU_DOCK_MONITOR_ALL;
+    }
+  else
+    {
+      g_autoptr (CcDisplayMonitor) monitor = get_dock_monitor (self);
+
+      if (monitor)
+        {
+          if (!g_list_store_find_with_equal_func (self->dock_monitors_list,
+                                                  monitor,
+                                                  dock_placement_row_compare,
+                                                  &selection))
+            selection = GSD_UBUNTU_DOCK_MONITOR_PRIMARY;
+        }
+    }
+
+  adw_combo_row_set_selected (self->dock_monitor_row, selection);
+}
+
+static void
+cc_ubuntu_panel_class_init (CcUbuntuPanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  object_class->dispose = cc_ubuntu_panel_dispose;
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/ubuntu/cc-ubuntu-panel.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, no_settings_page);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, dock_preferences_page);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, dock_autohide_switch);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, dock_extendheight_row);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, dock_monitor_row);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, dock_position_row);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, icon_size_adjustment);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, icon_size_scale);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, volumes_switch);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, unmounted_check);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, network_volumes_check);
+  gtk_widget_class_bind_template_child (widget_class, CcUbuntuPanel, trash_switch);
+
+  gtk_widget_class_bind_template_callback (widget_class, on_dock_position_row_changed);
+  gtk_widget_class_bind_template_callback (widget_class, on_dock_monitor_row_changed);
+  gtk_widget_class_bind_template_callback (widget_class, on_icon_size_adjustment_value_changed);
+}
+
+static void
+mapped_cb (CcUbuntuPanel *self)
+{
+  CcShell *shell;
+  GtkWidget *toplevel;
+
+  if (!self->dock_settings)
+    return;
+
+  shell = cc_panel_get_shell (CC_PANEL (self));
+  toplevel = cc_shell_get_toplevel (shell);
+
+  g_signal_handlers_disconnect_by_func (toplevel, mapped_cb, self);
+  g_signal_connect_object (toplevel, "notify::has-toplevel-focus",
+                           G_CALLBACK (ensure_monitor_labels), self,
+                           G_CONNECT_SWAPPED);
+}
+
+typedef enum
+{
+  GSD_UBUNTU_DOCK_POSITION_TOP,
+  GSD_UBUNTU_DOCK_POSITION_RIGHT,
+  GSD_UBUNTU_DOCK_POSITION_BOTTOM,
+  GSD_UBUNTU_DOCK_POSITION_LEFT,
+
+  GSD_UBUNTU_DOCK_POSITION_FIRST = GSD_UBUNTU_DOCK_POSITION_RIGHT,
+} GsdUbuntuDockPosition;
+
+static GsdUbuntuDockPosition
+get_dock_position_for_direction (CcUbuntuPanel         *self,
+                                 GsdUbuntuDockPosition  position)
+{
+  if (gtk_widget_get_state_flags (GTK_WIDGET (self)) & GTK_STATE_FLAG_DIR_RTL)
+    {
+      switch (position)
+        {
+          case GSD_UBUNTU_DOCK_POSITION_RIGHT:
+            position = GSD_UBUNTU_DOCK_POSITION_LEFT;
+            break;
+          case GSD_UBUNTU_DOCK_POSITION_LEFT:
+            position = GSD_UBUNTU_DOCK_POSITION_LEFT;
+            break;
+          default:
+            break;
+        }
+    }
+
+  return position;
+}
+
+static const char *
+get_dock_position_string (GsdUbuntuDockPosition  position)
+{
+  switch (position)
+    {
+      case GSD_UBUNTU_DOCK_POSITION_TOP:
+        return "TOP";
+      case GSD_UBUNTU_DOCK_POSITION_RIGHT:
+        return "RIGHT";
+      case GSD_UBUNTU_DOCK_POSITION_BOTTOM:
+        return "BOTTOM";
+      case GSD_UBUNTU_DOCK_POSITION_LEFT:
+        return "LEFT";
+      default:
+        g_return_val_if_reached ("LEFT");
+    }
+}
+
+static GsdUbuntuDockPosition
+get_dock_position_from_string (const char *position)
+{
+  if (g_str_equal (position, "TOP"))
+    return GSD_UBUNTU_DOCK_POSITION_TOP;
+
+  if (g_str_equal (position, "RIGHT"))
+    return GSD_UBUNTU_DOCK_POSITION_RIGHT;
+
+  if (g_str_equal (position, "BOTTOM"))
+    return GSD_UBUNTU_DOCK_POSITION_BOTTOM;
+
+  if (g_str_equal (position, "LEFT"))
+    return GSD_UBUNTU_DOCK_POSITION_LEFT;
+
+  g_return_val_if_reached (GSD_UBUNTU_DOCK_POSITION_LEFT);
+}
+
+static GsdUbuntuDockPosition
+get_dock_position_row_position (CcUbuntuPanel *self,
+                                int            index)
+{
+  GListModel *model = adw_combo_row_get_model (self->dock_position_row);
+  g_autoptr(GObject) value_object = g_list_model_get_item (model, index);
+
+  return GPOINTER_TO_INT (g_object_get_data (G_OBJECT (value_object), "position"));
+}
+
+static int
+get_dock_position_row_index (CcUbuntuPanel         *self,
+                             GsdUbuntuDockPosition  position)
+{
+  GListModel *model = adw_combo_row_get_model (self->dock_position_row);
+  guint n_items;
+  guint i;
+
+  n_items = g_list_model_get_n_items (model);
+
+  if (position == GSD_UBUNTU_DOCK_POSITION_TOP)
+    return n_items;
+
+  for (i = 0; i < n_items; i++)
+    {
+      g_autoptr(GObject) value_object = g_list_model_get_item (model, i);
+      GsdUbuntuDockPosition item_position;
+
+      item_position = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (value_object), "position"));
+
+      if (item_position == position)
+        return i;
+    }
+
+  g_return_val_if_reached (n_items);
+}
+
+static gboolean
+dock_position_get_mapping (GValue   *value,
+                           GVariant *variant,
+                           gpointer  user_data)
+{
+  CcUbuntuPanel *self = user_data;
+  GsdUbuntuDockPosition position;
+
+  position = get_dock_position_from_string (g_variant_get_string (variant, NULL));
+  position = get_dock_position_for_direction (self, position);
+
+  if (G_VALUE_TYPE (value) == G_TYPE_UINT)
+    {
+      g_value_set_uint (value, get_dock_position_row_index (self, position));
+      return TRUE;
+    }
+  else if (G_VALUE_TYPE (value) == G_TYPE_STRING)
+    {
+      g_value_set_string (value, get_dock_position_string (position));
+      return TRUE;
+    }
+
+  return FALSE;
+}
+
+static GVariant *
+dock_position_set_mapping (const GValue       *value,
+                           const GVariantType *type,
+                           gpointer            user_data)
+{
+  CcUbuntuPanel *self = user_data;
+  GsdUbuntuDockPosition position;
+
+  position = get_dock_position_row_position (self, g_value_get_uint (value));
+  position = get_dock_position_for_direction (self, position);
+
+  return g_variant_new_string (get_dock_position_string (position));
+}
+
+static void
+populate_dock_position_row (AdwComboRow *combo_row)
+{
+  g_autoptr (GtkStringList) string_list = NULL;
+  struct {
+    char *name;
+    GsdUbuntuDockPosition position;
+  } positions[] = {
+    {
+      NC_("Position on screen for the Ubuntu dock", "Left"),
+          GSD_UBUNTU_DOCK_POSITION_LEFT,
+    },
+    {
+      NC_("Position on screen for the Ubuntu dock", "Bottom"),
+          GSD_UBUNTU_DOCK_POSITION_BOTTOM,
+    },
+    {
+      NC_("Position on screen for the Ubuntu dock", "Right"),
+          GSD_UBUNTU_DOCK_POSITION_RIGHT,
+    },
+  };
+  guint i;
+
+  string_list = gtk_string_list_new (NULL);
+  for (i = 0; i < G_N_ELEMENTS (positions); i++)
+    {
+      g_autoptr (GObject) value_object = NULL;
+
+      gtk_string_list_append (string_list, g_dpgettext2 (NULL, "Position on screen for the Ubuntu dock", positions[i].name));
+      value_object = g_list_model_get_item (G_LIST_MODEL (string_list), i);
+      g_object_set_data (value_object, "position",
+                         GUINT_TO_POINTER (positions[i].position));
+    }
+
+  adw_combo_row_set_model (combo_row, G_LIST_MODEL (string_list));
+}
+
+static void
+cc_ubuntu_panel_init (CcUbuntuPanel *self)
+{
+  GSettingsSchemaSource *schema_source = g_settings_schema_source_get_default ();
+  g_autoptr(GSettingsSchema) schema = NULL;
+
+  g_resources_register (cc_ubuntu_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+
+  /* Only load if we have ubuntu dock or dash to dock installed */
+  schema = g_settings_schema_source_lookup (schema_source, UBUNTU_DOCK_SCHEMA, TRUE);
+  if (schema)
+    {
+      GtkExpression *expression;
+
+      self->dock_settings = g_settings_new_full (schema, NULL, NULL);
+      self->dock_monitors_list = g_list_store_new (G_TYPE_OBJECT);
+
+      expression = gtk_cclosure_expression_new (G_TYPE_STRING,
+                                                NULL, 0, NULL,
+                                                G_CALLBACK (get_dock_monitor_value_object_name),
+                                                self, NULL);
+      adw_combo_row_set_expression (self->dock_monitor_row, expression);
+
+      self->updating = TRUE;
+      adw_combo_row_set_model (self->dock_monitor_row,
+                               G_LIST_MODEL (self->dock_monitors_list));
+      self->updating = FALSE;
+
+      populate_dock_position_row (self->dock_position_row);
+
+      g_signal_connect_object (self->dock_settings,
+                               "changed::" ICONSIZE_KEY,
+                               G_CALLBACK (icon_size_widget_refresh),
+                               self, G_CONNECT_SWAPPED);
+      g_signal_connect_object (self->dock_settings,
+                               "changed::" UBUNTU_DOCK_ALL_MONITORS_KEY,
+                               G_CALLBACK (update_dock_monitor_combo_row_selection),
+                               self, G_CONNECT_SWAPPED);
+      g_signal_connect_object (self->dock_settings,
+                               "changed::" UBUNTU_DOCK_PREFERRED_MONITOR_KEY,
+                               G_CALLBACK (update_dock_monitor_combo_row_selection),
+                               self, G_CONNECT_SWAPPED);
+      g_signal_connect_object (self->dock_settings,
+                               "changed::" UBUNTU_DOCK_PREFERRED_CONNECTOR_KEY,
+                               G_CALLBACK (update_dock_monitor_combo_row_selection),
+                               self, G_CONNECT_SWAPPED);
+      g_settings_bind_with_mapping (self->dock_settings, "dock-position",
+                                    self->dock_position_row, "selected",
+                                    G_SETTINGS_BIND_NO_SENSITIVITY,
+                                    dock_position_get_mapping,
+                                    dock_position_set_mapping,
+                                    self, NULL);
+      g_settings_bind (self->dock_settings, "dock-fixed",
+                       self->dock_autohide_switch, "active",
+                       G_SETTINGS_BIND_INVERT_BOOLEAN |
+                       G_SETTINGS_BIND_NO_SENSITIVITY);
+  
+      g_settings_bind (self->dock_settings, "extend-height",
+                       self->dock_extendheight_row, "use-default",
+                       G_SETTINGS_BIND_INVERT_BOOLEAN);
+
+      g_settings_bind (self->dock_settings, "show-mounts",
+                       self->volumes_switch, "active",
+                       G_SETTINGS_BIND_DEFAULT);
+
+      g_settings_bind (self->dock_settings, "show-mounts-only-mounted",
+                       self->unmounted_check, "active",
+                       G_SETTINGS_BIND_INVERT_BOOLEAN);
+
+      g_settings_bind (self->dock_settings, "show-mounts-network",
+                       self->network_volumes_check, "active",
+                       G_SETTINGS_BIND_DEFAULT);
+
+      g_settings_bind (self->dock_settings, "show-trash",
+                       self->trash_switch, "active",
+                       G_SETTINGS_BIND_DEFAULT);
+
+      /* Icon size change - we halve the sizes so we can only get even values */
+      gtk_adjustment_set_value (self->icon_size_adjustment, DEFAULT_ICONSIZE / 2);
+      gtk_adjustment_set_lower (self->icon_size_adjustment, MIN_ICONSIZE / 2);
+      gtk_adjustment_set_upper (self->icon_size_adjustment, MAX_ICONSIZE / 2);
+      gtk_scale_add_mark (self->icon_size_scale, DEFAULT_ICONSIZE / 2, GTK_POS_BOTTOM, NULL);
+      gtk_scale_set_format_value_func (self->icon_size_scale,
+                                       on_icon_size_format_value,
+                                       NULL, NULL);
+
+      icon_size_widget_refresh (self);
+
+      g_bus_get (G_BUS_TYPE_SESSION,
+                 cc_panel_get_cancellable (CC_PANEL (self)),
+                 session_bus_ready, self);
+
+      g_clear_pointer (&schema, g_settings_schema_unref);
+    }
+  else
+    {
+      g_warning ("No Ubuntu Dock is installed here. Panel disabled. Please fix your installation.");
+      gtk_widget_set_visible (GTK_WIDGET (self->dock_preferences_page), FALSE);
+      gtk_widget_set_visible (GTK_WIDGET (self->no_settings_page), TRUE);
+    }
+
+  cc_object_storage_create_dbus_proxy (G_BUS_TYPE_SESSION,
+                                       G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES |
+                                       G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS |
+                                       G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START,
+                                       "org.gnome.Shell",
+                                       "/org/gnome/Shell",
+                                       "org.gnome.Shell",
+                                       cc_panel_get_cancellable (CC_PANEL (self)),
+                                       (GAsyncReadyCallback) shell_proxy_ready,
+                                       self);
+
+  g_signal_connect (self, "map", G_CALLBACK (mapped_cb), NULL);
+}
+
+void
+cc_ubuntu_panel_static_init_func (void)
+{
+  CcApplication *application;
+  const gchar *desktop_list;
+  g_auto(GStrv) desktops = NULL;
+
+  desktop_list = g_getenv ("XDG_CURRENT_DESKTOP");
+  if (desktop_list != NULL)
+    desktops = g_strsplit (desktop_list, ":", -1);
+
+  if (desktops == NULL || !g_strv_contains ((const gchar * const *) desktops, "zarya")) {
+    application = CC_APPLICATION (g_application_get_default ());
+    cc_shell_model_set_panel_visibility (cc_application_get_model (application),
+                                         "ubuntu",
+                                         CC_PANEL_HIDDEN);
+  }
+}
--- /dev/null
+++ b/panels/ubuntu/cc-ubuntu-panel.h
@@ -0,0 +1,35 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * Copyright (C) 2017 Canonical Ltd
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General
+ * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef _CC_UBUNTU_PANEL_H_
+#define _CC_UBUNTU_PANEL_H_
+
+#include <gio/gio.h>
+#include <shell/cc-panel.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_UBUNTU_PANEL (cc_ubuntu_panel_get_type ())
+G_DECLARE_FINAL_TYPE (CcUbuntuPanel, cc_ubuntu_panel, CC, UBUNTU_PANEL, CcPanel)
+
+void cc_ubuntu_panel_static_init_func (void);
+
+G_END_DECLS
+
+#endif /* _CC_EDIT_DIALOG_H_ */
--- /dev/null
+++ b/panels/ubuntu/cc-ubuntu-panel.ui
@@ -0,0 +1,142 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <template class="CcUbuntuPanel" parent="CcPanel">
+
+    <child type="content">
+      <object class="GtkStack" id="stack">
+        <child>
+          <object class="AdwStatusPage" id="no_settings_page">
+            <property name="icon-name">org.gnome.Settings-dock-symbolic</property>
+            <property name="visible">0</property>
+            <property name="title" translatable="yes">Dock not found</property>
+            <property name="description" translatable="yes">Oops, something has gone wrong. Please report a bug.</property>
+          </object>
+        </child>
+        <child>
+          <object class="AdwPreferencesPage" id="dock_preferences_page">
+            <child>
+              <object class="AdwPreferencesGroup" id="layout_group">
+                <property name="title" translatable="yes">Layout</property>
+                <child>
+                  <object class="CcSplitRow" id="dock_extendheight_row">
+                    <property name="default-option-title" translatable="yes">Default</property>
+                    <property name="default-option-subtitle" translatable="yes">Dock floats in the center</property>
+                    <property name="alternative-option-title" translatable="yes">Panel</property>
+                    <property name="alternative-option-subtitle" translatable="yes">Dock extends to edges</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="CcListRow" id="dock_autohide_switch">
+                    <property name="title" translatable="yes">Auto-hide</property>
+                    <property name="use-underline">True</property>
+                    <property name="show-switch">True</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+
+            <child>
+              <object class="AdwPreferencesGroup" id="position_group">
+                <property name="title" translatable="yes">Position and size</property>
+                <child>
+                  <object class="AdwActionRow">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="title" translatable="yes">Icon size</property>
+                    <property name="activatable">True</property>
+                    <child>
+                      <object class="GtkScale" id="icon_size_scale">
+                        <property name="adjustment">icon_size_adjustment</property>
+                        <property name="orientation">horizontal</property>
+                        <property name="draw-value">True</property>
+                        <property name="value-pos">left</property>
+                        <property name="width_request">264</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+                <child>
+                  <object class="AdwComboRow" id="dock_monitor_row">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="width_request">100</property>
+                    <property name="title" translatable="yes">Show on</property>
+                    <signal name="notify::selected-item" handler="on_dock_monitor_row_changed" swapped="yes"/>
+                  </object>
+                </child>
+                <child>
+                  <object class="AdwComboRow" id="dock_position_row">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="width_request">100</property>
+                    <property name="title" translatable="yes">Position</property>
+                    <signal name="notify::selected-item" handler="on_dock_position_row_changed" swapped="yes"/>
+                  </object>
+                </child>
+              </object>
+            </child>
+
+            <child>
+              <object class="AdwPreferencesGroup" id="behaviour_group">
+                <property name="title" translatable="yes">Behaviour</property>
+                <child>
+                  <object class="CcListRow" id="volumes_switch">
+                    <property name="title" translatable="yes">Show _Volumes and _Devices</property>
+                    <property name="use-underline">True</property>
+                    <property name="show-switch">True</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="AdwActionRow" id="unmounted_row">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="title" translatable="yes">Include _Unmounted Volumes</property>
+                    <property name="activatable">True</property>
+                    <property name="activatable_widget">unmounted_check</property>
+                    <property name="sensitive" bind-source="volumes_switch" bind-property="active" bind-flags="default|sync-create" />
+                    <child type="prefix">
+                      <object class="GtkCheckButton" id="unmounted_check">
+                        <property name="can_focus">True</property>
+                        <property name="valign">center</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+                <child>
+                  <object class="AdwActionRow" id="network_volumes_row">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="title" translatable="yes">Include _Network Volumes</property>
+                    <property name="activatable">True</property>
+                    <property name="activatable_widget">network_volumes_check</property>
+                    <property name="sensitive" bind-source="volumes_switch" bind-property="active" bind-flags="default|sync-create" />
+                    <child type="prefix">
+                      <object class="GtkCheckButton" id="network_volumes_check">
+                        <property name="can_focus">True</property>
+                        <property name="valign">center</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+                <child>
+                  <object class="CcListRow" id="trash_switch">
+                    <property name="use_underline">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="show-switch">True</property>
+                    <property name="title" translatable="yes">Show _Trash</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+        </child>
+        
+      </object>
+    </child>
+  </template>
+  <object class="GtkAdjustment" id="icon_size_adjustment">
+    <property name="step_increment">1</property>
+    <property name="page_increment">4</property>
+    <signal name="value-changed" handler="on_icon_size_adjustment_value_changed" object="CcUbuntuPanel" swapped="yes"/>
+  </object>
+</interface>
\ No newline at end of file
--- /dev/null
+++ b/panels/ubuntu/gnome-ubuntu-panel.desktop.in
@@ -0,0 +1,13 @@
+[Desktop Entry]
+Name=Dock
+Comment=Configure Dock layout, position, size and behaviour
+Exec=gnome-control-center ubuntu
+Icon=org.gnome.Settings-dock-symbolic
+Terminal=false
+Type=Application
+NoDisplay=true
+StartupNotify=true
+Categories=GNOME;GTK;Settings;DesktopSettings;X-GNOME-Settings-Panel;X-GNOME-PersonalSettings;X-GNOME-PersonalizationSettings;
+OnlyShowIn=zarya;
+# Translators: those are keywords for the zarya control-center panel
+Keywords=Dock;Launcher;
--- /dev/null
+++ b/panels/ubuntu/meson.build
@@ -0,0 +1,51 @@
+fs = import('fs')
+
+panels_list += cappletname
+desktop = 'gnome-@0@-panel.desktop'.format(cappletname)
+
+i18n.merge_file(
+  type: 'desktop',
+  input: desktop + '.in',
+  output: desktop,
+  po_dir: po_dir,
+  install: true,
+  install_dir: control_center_desktopdir
+)
+
+sources = files(
+  'cc-ubuntu-panel.c'
+)
+
+gresource_xml_contents = []
+resource_generated_data = []
+resource_data = files(
+  'cc-ubuntu-panel.ui'
+)
+
+gresource_xml = configure_file(
+  configuration: {
+    'GENERATED_FILES': '\n'.join(gresource_xml_contents)
+  },
+  input: cappletname + '.gresource.xml',
+  output: cappletname + '.generated.gresource.xml',
+)
+
+sources += gnome.compile_resources(
+  'cc-' + cappletname + '-resources',
+  gresource_xml,
+  c_name: 'cc_' + cappletname,
+  dependencies: resource_data + resource_generated_data,
+  export: true
+)
+
+cflags += '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir)
+
+panels_libs += static_library(
+  cappletname,
+  sources: sources,
+  include_directories: [top_inc, common_inc],
+  dependencies: common_deps,
+  c_args: cflags
+)
+
+subdir('icons')
--- /dev/null
+++ b/panels/ubuntu/ubuntu.gresource.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/control-center/ubuntu">
+     <file preprocess="xml-stripblanks">cc-ubuntu-panel.ui</file>
+    <file>assets/bottom/dock.svg</file>
+    <file>assets/bottom/panel.svg</file>
+    <file>assets/left/dock.svg</file>
+    <file>assets/left/panel.svg</file>
+    <file>assets/right/dock.svg</file>
+    <file>assets/right/panel.svg</file>
+  </gresource>
+</gresources>
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -218,6 +218,11 @@
 panels/thunderbolt/cc-bolt-panel.c
 panels/thunderbolt/cc-bolt-panel.ui
 panels/thunderbolt/gnome-thunderbolt-panel.desktop.in
+panels/ubuntu/cc-ubuntu-panel.c
+panels/ubuntu/cc-ubuntu-panel.ui
+panels/ubuntu/cc-ubuntu-dock-dialog.c
+panels/ubuntu/cc-ubuntu-dock-dialog.ui
+panels/ubuntu/gnome-ubuntu-panel.desktop.in
 panels/universal-access/cc-cursor-size-dialog.ui
 panels/universal-access/cc-ua-hearing-page.ui
 panels/universal-access/cc-ua-mouse-page.ui
--- a/shell/cc-panel-list.c
+++ b/shell/cc-panel-list.c
@@ -392,6 +392,7 @@
   "mobile-broadband",
   "bluetooth",
   "background",
+  "ubuntu",
   "notifications",
   "search",
   "multitasking",
--- a/shell/cc-panel-loader.c
+++ b/shell/cc-panel-loader.c
@@ -61,6 +61,7 @@
 extern GType cc_bolt_panel_get_type (void);
 #endif /* BUILD_THUNDERBOLT */
 extern GType cc_ua_panel_get_type (void);
+extern GType cc_ubuntu_panel_get_type(void);
 extern GType cc_user_panel_get_type (void);
 #ifdef BUILD_WACOM
 extern GType cc_wacom_panel_get_type (void);
@@ -68,6 +69,7 @@
 #ifdef BUILD_WWAN
 extern GType cc_wwan_panel_get_type (void);
 #endif /* BUILD_WWAN */
+extern GType cc_ubuntu_panel_static_init_func (void);
 extern GType cc_location_panel_get_type (void);
 extern GType cc_firmware_security_panel_get_type (void);
 extern GType cc_camera_panel_get_type (void);
@@ -134,6 +136,7 @@
   PANEL_TYPE("search",           cc_search_panel_get_type,               NULL),
   PANEL_TYPE("sharing",          cc_sharing_panel_get_type,              NULL),
   PANEL_TYPE("sound",            cc_sound_panel_get_type,                NULL),
+  PANEL_TYPE("ubuntu",           cc_ubuntu_panel_get_type,               cc_ubuntu_panel_static_init_func),
 #ifdef BUILD_THUNDERBOLT
   PANEL_TYPE("thunderbolt",      cc_bolt_panel_get_type,                 cc_thunderbolt_panel_static_init_func),
 #endif
--- /dev/null
+++ b/panels/ubuntu/icons/scalable/org.gnome.Settings-dock-symbolic.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M3 1C1.355 1 0 2.355 0 4v8c0 1.645 1.355 3 3 3h10c1.645 0 3-1.355 3-3V4c0-1.645-1.355-3-3-3zm0 2h10c.57 0 1 .43 1 1v8c0 .57-.43 1-1 1H3c-.57 0-1-.43-1-1V4c0-.57.43-1 1-1zm0 0"/><path fill-opacity=".349" d="M15 9.5H1V14h14Zm0 0"/><path d="M1 10V9h14v1zm0 0"/></svg>
--- /dev/null
+++ b/panels/ubuntu/assets/bottom/dock.svg
@@ -0,0 +1 @@
+<svg width="160" height="94" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg"><path d="M0 0v24.873h42.334V0H-.001zm.528 1.588h41.276v22.755H26.723v-1.599a.527.527 0 0 0-.528-.518H16.14a.528.528 0 0 0-.53.529v1.587H.528V1.588zm16.036 21.167h.74c.235 0 .424.188.424.423v.741a.422.422 0 0 1-.423.423h-.741a.423.423 0 0 1-.424-.423v-.741c0-.235.19-.423.424-.423zm2.117 0h.74c.235 0 .424.188.424.423v.741a.422.422 0 0 1-.423.423h-.741a.422.422 0 0 1-.424-.423v-.741c0-.235.189-.423.424-.423zm2.116 0h.741c.235 0 .424.188.424.423v.741a.422.422 0 0 1-.424.423h-.74a.422.422 0 0 1-.424-.423v-.741c0-.235.189-.423.423-.423zm2.117 0h.741c.235 0 .423.188.423.423v.741a.422.422 0 0 1-.423.423h-.741a.422.422 0 0 1-.423-.423v-.741c0-.235.188-.423.423-.423zm2.117 0h.74c.235 0 .424.188.424.423v.741a.422.422 0 0 1-.423.423h-.741a.422.422 0 0 1-.424-.423v-.741c0-.235.19-.423.424-.423z" fill="#3584e4"/><path d="M.529 1.588v3.175h3.44c.732 0 1.322.59 1.322 1.323v12.7A1.32 1.32 0 0 1 3.97 20.11H.529v4.234H15.61v-1.588c0-.293.236-.53.53-.53h10.054c.29 0 .523.231.528.52v1.597h15.082V20.11h-3.44a1.32 1.32 0 0 1-1.322-1.323v-12.7c0-.734.59-1.324 1.323-1.324h3.44V1.588H.528zM9.26 4.763h23.814c.733 0 1.323.59 1.323 1.323v12.7a1.32 1.32 0 0 1-1.323 1.323H9.26a1.32 1.32 0 0 1-1.323-1.323v-12.7c0-.733.59-1.323 1.323-1.323zm16.934 18.393v.785l.001-.022v-.763z" fill="#3584e4" opacity=".287"/></svg>
--- /dev/null
+++ b/panels/ubuntu/assets/bottom/panel.svg
@@ -0,0 +1 @@
+<svg width="160" height="94" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg"><path d="M0 0v24.872h42.334V0H0zm.529 1.588h41.276v20.638H.528V1.588zm.952 21.167h.741c.235 0 .424.188.424.423v.741a.422.422 0 0 1-.424.423h-.74a.422.422 0 0 1-.424-.423v-.741c0-.235.189-.423.423-.423zm2.117 0h.741c.235 0 .423.188.423.423v.741c0 .233-.186.42-.418.423h-.751a.422.422 0 0 1-.418-.423v-.741c0-.235.188-.423.423-.423zm2.117 0h.74c.235 0 .424.188.424.423v.741c0 .233-.186.42-.418.423H5.71a.422.422 0 0 1-.419-.423v-.741c0-.235.19-.423.424-.423zm2.116 0h.742c.234 0 .423.188.423.423v.741c0 .233-.186.42-.418.423h-.752a.422.422 0 0 1-.418-.423v-.741c0-.235.189-.423.423-.423zm32.016 0h.74c.235 0 .424.188.424.423v.741c0 .233-.186.42-.418.423h-.751a.422.422 0 0 1-.418-.423v-.741c0-.235.188-.423.423-.423z" fill="#3584e4"/><path d="M.529 1.588v3.175h3.44c.732 0 1.322.59 1.322 1.323v12.7a1.32 1.32 0 0 1-1.322 1.323H.529v2.117h41.276V1.588H.53zM9.26 4.763h23.814c.733 0 1.322.59 1.322 1.323v12.7a1.32 1.32 0 0 1-1.322 1.323H9.26a1.32 1.32 0 0 1-1.323-1.323v-12.7c0-.733.59-1.323 1.323-1.323zm29.105 0h3.44V20.11h-3.44a1.32 1.32 0 0 1-1.323-1.323v-12.7c0-.733.59-1.323 1.323-1.323z" fill="#3584e4" opacity=".287"/></svg>
--- /dev/null
+++ b/panels/ubuntu/assets/left/dock.svg
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg id="svg6" width="160" height="94" version="1.1" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg">
+ <path id="path2" transform="matrix(.26459 0 0 .26459 -.00030851 0)" d="m0 0v94.004h160v-94.004h-150zm2 6h156v86h-156v-25h6c1.108 0 2-0.892 2-2v-38c0-1.108-0.892-2-2-2h-6zm1.5996 21h2.8008c0.88643 0 1.5996 0.71319 1.5996 1.5996v2.8008c0 0.88643-0.7132 1.5996-1.5996 1.5996h-2.8008c-0.88643 0-1.5996-0.71319-1.5996-1.5996v-2.8008c0-0.88643 0.7132-1.5996 1.5996-1.5996zm0 8h2.8008c0.88643 0 1.5996 0.71319 1.5996 1.5996v2.8008c0 0.88642-0.7132 1.5996-1.5996 1.5996h-2.8008c-0.88643 0-1.5996-0.71319-1.5996-1.5996v-2.8008c0-0.88643 0.7132-1.5996 1.5996-1.5996zm0 8h2.8008c0.88643 0 1.5996 0.7132 1.5996 1.5996v2.8008c0 0.88642-0.7132 1.5996-1.5996 1.5996h-2.8008c-0.88643 0-1.5996-0.71319-1.5996-1.5996v-2.8008c0-0.88642 0.7132-1.5996 1.5996-1.5996zm0 8h2.8008c0.88643 0 1.5996 0.7132 1.5996 1.5996v2.8008c0 0.88643-0.7132 1.5996-1.5996 1.5996h-2.8008c-0.88643 0-1.5996-0.71319-1.5996-1.5996v-2.8008c0-0.88642 0.7132-1.5996 1.5996-1.5996zm0 8h2.8008c0.88643 0 1.5996 0.7132 1.5996 1.5996v2.8008c0 0.88643-0.7132 1.5996-1.5996 1.5996h-2.8008c-0.88642 0-1.5996-0.71319-1.5996-1.5996v-2.8008c0-0.88642 0.7132-1.5996 1.5996-1.5996z" fill="#3584e4"/>
+ <path id="path4" transform="matrix(.26459 0 0 .26459 -.00030851 0)" d="m2 6v12h8v0.001953h5c2.7699 0 5 2.2282 5 4.998v48c0 2.7699-2.2301 5-5 5h-13v16h9v-0.001953h147v-85.998l-147 0.0019531v-0.0019531h-9zm33 12.002h90c2.7699 0 5 2.2282 5 4.998v48c0 2.7699-2.2301 5-5 5h-90c-2.7699 0-5-2.2301-5-5v-48c0-2.7699 2.2301-4.998 5-4.998zm110 0h13v58h-13c-2.7699 0-5-2.2301-5-5v-48c0-2.7699 2.2301-5 5-5z" fill="#3584e4" opacity=".28"/>
+</svg>
--- /dev/null
+++ b/panels/ubuntu/assets/left/panel.svg
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg id="svg6" width="160" height="94" version="1.1" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg">
+ <path id="path2" d="m-3.0851e-4 0v24.872h42.334v-24.872h-39.688zm0.95242 1.5875h0.74106c0.23454 0 0.42324 0.18871 0.42324 0.42324v0.74106c0 0.23454-0.18871 0.42324-0.42324 0.42324h-0.74106c-0.23454 0-0.42324-0.18871-0.42324-0.42324v-0.74106c0-0.23454 0.18871-0.42324 0.42324-0.42324zm1.6935 0h39.159v22.754h-39.159zm-1.6935 2.1167h0.74106c0.23454 0 0.42324 0.18871 0.42324 0.42324v0.74106c0 0.23454-0.18871 0.42324-0.42324 0.42324h-0.74106c-0.23454 0-0.42324-0.1887-0.42324-0.42324v-0.74106c0-0.23454 0.18871-0.42324 0.42324-0.42324zm0 2.1167h0.74106c0.23454 0 0.42324 0.18871 0.42324 0.42324v0.74106c0 0.23454-0.18871 0.42324-0.42324 0.42324h-0.74106c-0.23454 0-0.42324-0.1887-0.42324-0.42324v-0.74106c0-0.23454 0.18871-0.42324 0.42324-0.42324zm0 2.1167h0.74106c0.23454 0 0.42324 0.18871 0.42324 0.42324v0.74106c0 0.23454-0.18871 0.42324-0.42324 0.42324h-0.74106c-0.23454 0-0.42324-0.18871-0.42324-0.42324v-0.74106c0-0.23454 0.18871-0.42324 0.42324-0.42324zm0 14.023h0.74106c0.23454 0 0.42324 0.1887 0.42324 0.42324v0.74106c0 0.23454-0.18871 0.42324-0.42324 0.42324h-0.74106c-0.23454 0-0.42324-0.18871-0.42324-0.42324v-0.74106c0-0.23454 0.18871-0.42324 0.42324-0.42324z" fill="#3584e4" stroke-width=".26459"/>
+ <path id="path4" d="m2.6455 1.5878v3.175h1.3229c0.73288 0 1.3229 0.59003 1.3229 1.3229v12.7c0 0.73288-0.59003 1.3229-1.3229 1.3229h-1.3229v4.2329h39.159v-22.754zm6.6146 3.175h23.813c0.73288 0 1.3229 0.59003 1.3229 1.3229v12.7c0 0.73288-0.59003 1.3229-1.3229 1.3229h-23.813c-0.73288 0-1.3229-0.59003-1.3229-1.3229v-12.7c0-0.73288 0.59003-1.3229 1.3229-1.3229zm29.104 0h3.4396v15.346h-3.4396c-0.73288 0-1.3229-0.59003-1.3229-1.3229v-12.7c0-0.73288 0.59003-1.3229 1.3229-1.3229z" fill="#3584e4" opacity=".287" stroke-width=".26459"/>
+</svg>
--- /dev/null
+++ b/panels/ubuntu/assets/right/dock.svg
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg id="svg6" width="160" height="94" version="1.1" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg">
+ <path id="path2" d="M42.334 0v24.873H0V0h39.688zm-.53 1.587H.53v22.755h41.276v-6.614h-1.588a.528.528 0 0 1-.529-.53V7.146c0-.294.236-.53.53-.53h1.587zm-.422 5.557h-.741a.422.422 0 0 0-.424.423v.741c0 .235.189.423.424.423h.74a.422.422 0 0 0 .424-.423v-.74a.422.422 0 0 0-.423-.424zm0 2.117h-.741a.422.422 0 0 0-.424.423v.74c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.423v-.741a.422.422 0 0 0-.423-.423zm0 2.116h-.741a.422.422 0 0 0-.424.424v.74c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.423V11.8a.422.422 0 0 0-.423-.424zm0 2.117h-.741a.422.422 0 0 0-.424.423v.741c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.424v-.74a.422.422 0 0 0-.423-.424zm0 2.117h-.741a.422.422 0 0 0-.424.423v.741c0 .235.189.423.424.423h.74a.422.422 0 0 0 .424-.423v-.741a.422.422 0 0 0-.423-.423z" fill="#3584e4"/>
+ <path id="path4" d="M41.805 1.587v3.176h-3.44a1.32 1.32 0 0 0-1.323 1.323v12.7c0 .732.59 1.323 1.323 1.323h3.44v4.233H.529V1.586h38.895zm-8.732 3.176H9.26a1.32 1.32 0 0 0-1.323 1.322v12.7c0 .733.59 1.323 1.323 1.323h23.813a1.32 1.32 0 0 0 1.323-1.323v-12.7a1.32 1.32 0 0 0-1.323-1.322zm-29.105 0H.528V20.11h3.44a1.32 1.32 0 0 0 1.323-1.323v-12.7a1.32 1.32 0 0 0-1.323-1.323z" fill="#3584e4" opacity=".28"/>
+</svg>
--- /dev/null
+++ b/panels/ubuntu/assets/right/panel.svg
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg id="svg6" width="160" height="94" version="1.1" viewBox="0 0 42.333 24.871" xmlns="http://www.w3.org/2000/svg">
+ <path id="path2" d="M42.334 0v24.872H0V0h39.688zm-.952 1.587h-.741a.422.422 0 0 0-.424.424v.74c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.423V2.01a.422.422 0 0 0-.423-.424zm-1.694 0H.53v22.755h39.16zm1.694 2.117h-.741a.422.422 0 0 0-.424.423v.742c0 .234.189.423.424.423h.74a.422.422 0 0 0 .424-.423v-.742a.422.422 0 0 0-.423-.423zm0 2.117h-.741a.422.422 0 0 0-.424.423v.741c0 .235.189.423.424.423h.74a.422.422 0 0 0 .424-.423v-.74a.422.422 0 0 0-.423-.424zm0 2.117h-.741a.422.422 0 0 0-.424.423v.74c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.423V8.36a.422.422 0 0 0-.423-.423zm0 14.023h-.741a.422.422 0 0 0-.424.423v.74c0 .235.189.424.424.424h.74a.422.422 0 0 0 .424-.423v-.741a.422.422 0 0 0-.423-.423z" fill="#3584e4"/>
+ <path id="path4" d="M39.688 1.588v3.175h-1.323a1.32 1.32 0 0 0-1.323 1.323v12.7c0 .733.59 1.323 1.323 1.323h1.323v4.232H.529V1.587zm-6.615 3.175H9.26a1.32 1.32 0 0 0-1.322 1.323v12.7c0 .733.59 1.323 1.322 1.323h23.813a1.32 1.32 0 0 0 1.323-1.323v-12.7a1.32 1.32 0 0 0-1.323-1.323zm-29.104 0H.53v15.346h3.44a1.32 1.32 0 0 0 1.323-1.323v-12.7A1.32 1.32 0 0 0 3.97 4.763z" fill="#3584e4" opacity=".287"/>
+</svg>
--- /dev/null
+++ b/panels/ubuntu/icons/meson.build
@@ -0,0 +1,4 @@
+install_data(
+  'scalable/org.gnome.Settings-dock-symbolic.svg',
+  install_dir: join_paths(control_center_icondir, 'hicolor', 'scalable', 'apps')
+)
